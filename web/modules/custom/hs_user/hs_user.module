<?php

use Drupal\user\Entity\User;

/**
 * Implements hook_user_theme()
 */
function hs_user_theme($existing, $type, $theme, $path){
  return[
    'views_view_fields__user_items' => [
      'base hook' => 'views_view_fields',
      'template' => 'views-view-fields--user-items',
    ],
    'user__hobbyswap' => [
      'base hook' => 'user',
      'template' => 'user--hobbyswap',
    ],
  ];
}

/**
 * Implements hook_theme_suggestions_alter()
 */
function hs_user_theme_suggestions_alter(array &$suggestions, array $variables, $hook){
  if($hook === 'views_view_fields' && $variables['view']->id() == 'user_items'){
    $suggestions[] = 'views_view_fields__user_items';
  }

  if($hook === 'views_view_field' && $variables['view']->id() == 'user_items') {
    $suggestions[] = 'views_view_field__user_item_image';
  }

  if($hook === 'user'){
    $suggestions[] = 'user__hobbyswap';
  }
}

/**
 * Implements hook_preprocess().
 */
function hs_user_preprocess(&$variables, $hook){
  if($hook === 'block' && $variables['elements']['#id'] == 'stack_local_tasks'){
    $variables['#attached']['library'] = ['hs_user/user-local-tasks'];
  }

  if($hook === 'user' && $variables['elements']['#view_mode'] == 'full'){
    $variables['#attached']['library'] = ['hs_user/user-view'];
    $variables['current_user'] = \Drupal::currentUser()->id();
  }
}

/**
 * Implements hook_entity_view_display_alter().
 */
function hs_user_entity_base_field_info_alter(&$fields, \Drupal\Core\Entity\EntityTypeInterface $entity_type){
  if($entity_type->id() == 'user') {
    $fields['name']->setDisplayConfigurable('view', TRUE);
  }
}

/**
 * Implements hook_cron().
 */
function hs_user_cron(){

  /** Set proper default for user_items view reference field */
  $config_factory = \Drupal::configFactory();
  $view_uuid = $config_factory->getEditable('views.view.user_items')->get('uuid');
  $field_user_items = $config_factory->getEditable('field.field.user.user.field_user_items');
  $field_user_items->set('default_value.0.target_uuid', $view_uuid)->save();

  /** Delete expired 2-factor authentication codes */
  $code_config = $config_factory->getEditable('hs_user.authentication_codes');
  $code_data = $code_config->getRawData();
  foreach($code_data['codes'] as $uid => $code){
    if(\Drupal::time()->getCurrentTime() - $code['registered'] >= $code_data['code_timeout']){
      $code_config->clear('codes.'.$uid);
    }
  }
  $code_config->save();

  /** Check users for expired subscriptions */
  //Load subscription and square manager services
  $subscription_manager = \Drupal::service('hs_user.subscription_manager');
  $square_manager = \Drupal::service('hs_square.square_manager');

  //Query all uids that are currently subscribed and are not anonymous
  $uids = \Drupal::entityQuery('user')
    ->condition('uid', 0, '>')
    ->condition('roles', 'subscribed', 'CONTAINS')
    ->execute();
  $updated_users = [];
  foreach($uids as $uid){
    //Use the subscription manager to check each subscribed uid to see if their subscription has expired (returns boolean)
    $is_expired = $subscription_manager->isUserSubscriptionExpired($uid);
    if($is_expired){
      //Load the user if their subscription has expired
      $user = User::load($uid);
      $customer = $square_manager->retrieveCustomerByUid($uid);
      $card_index = $square_manager->getDefaultCardIndex($customer);
      if($card_index !== null){
        //Renew the subscription
        $card_id = $customer->getCards()[$card_index]->getId();
        $current_plan = $user->get('field_subscription')->value;
        $plan_cost = $subscription_manager->getPlanData($current_plan)['cost'];
        $api_response = $square_manager->createPayment($card_id, $plan_cost, $customer);
        if($api_response->isSuccess()){
          $updated_users[] = $user->getDisplayName();
        }
      }else{
        //Deactivate the subscription
        $subscription_manager->removeUserSubscription($uid);
      }
    }
  }
  if(empty($updated_users)){
    \Drupal::messenger()->addStatus('No expired subscriptions detected');
  }else{
    \Drupal::messenger()->addStatus('Subscriptions renewed for the following users: '.implode(', ', $updated_users));
  }
}

/**
 * Implements hook_entity_type_alter()
 */
function hs_user_entity_type_alter(&$entity_types){
  //Change the namespacing for the user registration form to add custom behavior
  $entity_types['user']->setFormClass('register', 'Drupal\hs_user\Form\RegisterForm');
}